{"version":3,"sources":["components/Hello.js","components/Counter.js","components/fruits/FruitList.js","components/fruits/FruitForm.js","base.js","components/fruits/FruitApp.js","serviceWorker.js","index.js","logo.svg"],"names":["Hello","React","Component","FruitList","props","fruitData","list","removeItem","fruitItems","map","item","index","react_default","a","createElement","onClick","FruitForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","event","preventDefault","newFruit","refs","fruitInput","value","trim","addItem","type","ref","placeholder","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","base","Rebase","createClass","database","FruitApp","state","deleteFruit","addFruit","syncState","context","length","fruits","getData","splice","setState","fruitName","console","log","push","sort","fruits_FruitForm","fruits_FruitList","Boolean","window","location","hostname","match","ReactDOM","render","fruits_FruitApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wJASeA,yDCNOC,IAAMC,UCuBbC,MAvBf,SAAmBC,GAChB,IAAIC,EAAYD,EAAME,KAElBC,EAAaH,EAAMG,WAEnBC,EAAaH,EAAUI,IACxB,SAACC,EAAMC,GACJ,OAAQC,EAAAC,EAAAC,cAAA,UACJJ,EACDE,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAIR,EAAWI,KAAhC,aAST,OACGC,EAAAC,EAAAC,cAAA,UAAKN,ICUIQ,cA5BZ,SAAAA,EAAYZ,GAAM,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KACDoB,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAFDA,wEAKTU,GACNA,EAAMC,iBACN,IAAIC,EAAWT,KAAKU,KAAKC,WAAWC,MAAMC,OAEvCJ,IACAT,KAAKhB,MAAM8B,QAAQL,GACnBT,KAAKU,KAAKC,WAAWC,MAAQ,qCAKhC,OACGpB,EAAAC,EAAAC,cAAA,QAAMU,SAAUJ,KAAKI,UACjBZ,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OACTC,IAAI,aACJC,YAAY,gBACfzB,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,UAAb,mBAvBWlC,IAAMC,6CCUvBoC,EAAMC,IAASC,cATP,CACZC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,iBAMNC,EAFFC,IAAOC,YAAYX,EAAIY,YCgDtBC,cArDZ,SAAAA,IAAa,IAAAlC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IACVlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,QAEKgC,MAAQ,CACV/C,UAAW,CAAC,SAAU,SAAU,YAGnCY,EAAKoC,YAAcpC,EAAKoC,YAAY5B,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAKqC,SAAWrC,EAAKqC,SAAS7B,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IARNA,oFAYV8B,EAAKQ,UAAU,IAAK,CACjBC,QAASpC,KACTgC,MAAO,gDAKV,OAAIhC,KAAKgC,MAAM/C,UAAUoD,OAGfrC,KAAKgC,MAAM/C,UAFZ,uCAMAM,GACT,IAAI+C,EAAStC,KAAKuC,UAClBD,EAAOE,OAAOjD,EAAM,GACpBS,KAAKyC,SAAS,CAACxD,UAAWqD,qCAGpBI,GACN,IAAIJ,EAAStC,KAAKuC,UAClBI,QAAQC,IAAIN,GAEZA,EAAOO,KAAKH,GACZJ,EAAOQ,OACP9C,KAAKyC,SAAS,CAACxD,UAAWqD,qCAI1B,OAAQ9C,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACqD,EAAD,CAAWjC,QAASd,KAAKkC,WACzB1C,EAAAC,EAAAC,cAACsD,EAAD,CACG9D,KAAOc,KAAKuC,UACZpD,WAAYa,KAAKiC,sBAjDNpD,IAAMC,WCMTmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAAcC,SAASC,eAAe,SD0HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3c2225cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hello (props){\r\n   const name= props.name;\r\n   return (\r\n      <h1>{name}</h1>\r\n   );\r\n}\r\n\r\nexport default Hello;","import React from 'react';\r\nimport './counter.css';\r\n\r\nclass Counter extends React.Component {\r\n\r\n   constructor(){\r\n      super();\r\n      //Initialisation de l'état\r\n      this.state = {\r\n         clickCount: 0\r\n      };\r\n\r\n      this.addClickCount = this.changeClickCount.bind(this,1);\r\n      this.substractClickCount = this.changeClickCount.bind(this, -1);\r\n   }\r\n  \r\n   changeClickCount(amount){\r\n      let newClickCount = this.state.clickCount + amount;\r\n      this.setState({clickCount: newClickCount});\r\n   }\r\n   \r\n   showDetails(text){\r\n      console.log(text);\r\n   }\r\n\r\n   render(){\r\n\r\n      let message;\r\n\r\n      if(this.state.clickCount >0){\r\n         message = <div>Positif</div>;\r\n      }else if (this.state.clickCount ==0){\r\n         message = <div>Nul</div>\r\n      } else {\r\n         message = <div className=\"negative\">Négatif</div>\r\n      }\r\n\r\n      let fruits = [\"Pommes\", \"Poires\", \"Oranges\"];\r\n      let fruitList = fruits.map((item)=>{\r\n         return (\r\n            <li>\r\n               {item}\r\n               <button onClick={\r\n                  ()=>{this.showDetails(item)}}\r\n               >\r\n                  Afficher</button>\r\n            </li>\r\n         );\r\n      });\r\n\r\n      return (\r\n         <div>\r\n            <h1>Compte des clics</h1>\r\n            <p>nb de clicks : {this.state.clickCount}</p>\r\n            {message}\r\n            <button onClick={this.addClickCount}>Cliquez moi ++</button>\r\n\r\n            <button onClick={this.substractClickCount}>\r\n            cliquez moi --</button>\r\n\r\n            <ul>{fruitList}</ul>\r\n         </div>\r\n      );\r\n   }\r\n\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\n\r\nfunction FruitList(props){\r\n   let fruitData = props.list;\r\n\r\n   let removeItem = props.removeItem;\r\n\r\n   let fruitItems = fruitData.map(\r\n      (item, index) => {\r\n         return (<li>\r\n            {item} \r\n            <button onClick={()=>removeItem(index)}>\r\n               Delete\r\n            </button>\r\n         </li>\r\n         );\r\n      }\r\n   )\r\n   \r\n\r\n   return (\r\n      <ul>{fruitItems}</ul>\r\n   );\r\n}\r\n\r\nexport default FruitList;","import React from 'react';\r\n\r\nclass FruitForm extends React.Component{\r\n\r\n   constructor(props){\r\n      super(props);\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n   }\r\n\r\n   onSubmit(event){\r\n      event.preventDefault();\r\n      let newFruit = this.refs.fruitInput.value.trim();\r\n\r\n      if(newFruit){\r\n         this.props.addItem(newFruit);\r\n         this.refs.fruitInput.value = '';\r\n      }\r\n   }\r\n\r\n   render(){\r\n      return (\r\n         <form onSubmit={this.onSubmit}>\r\n             <input type=\"text\" \r\n                ref=\"fruitInput\"\r\n                placeholder=\"Votre fruit\" />\r\n             <button type=\"submit\">Ajouter</button>\r\n          </form> \r\n       );\r\n   }\r\n   \r\n}\r\n\r\nexport default FruitForm;","import firebase from 'firebase';\r\nimport Rebase from 're-base';\r\n\r\nconst config = {\r\n   apiKey: \"AIzaSyDubFeN8IP9Mte26ylfIcCNOLGaxeeNWMc\",\r\n   authDomain: \"webfruit-38af7.firebaseapp.com\",\r\n   databaseURL: \"https://webfruit-38af7.firebaseio.com\",\r\n   projectId: \"webfruit-38af7\",\r\n   storageBucket: \"webfruit-38af7.appspot.com\",\r\n   messagingSenderId: \"996615275975\"\r\n };\r\n\r\n const app = firebase.initializeApp(config);\r\n const base = Rebase.createClass(app.database());\r\n\r\n export default base;","import React from 'react';\r\nimport FruitList from './FruitList';\r\nimport FruitForm from './FruitForm';\r\n\r\nimport base from '../../base';\r\n\r\nclass FruitApp extends React.Component {\r\n\r\n   constructor(){\r\n      super();\r\n\r\n      this.state = {\r\n         fruitData: [\"Pommes\", \"Poires\", \"Tomates\"]\r\n      }\r\n\r\n      this.deleteFruit = this.deleteFruit.bind(this);\r\n      this.addFruit = this.addFruit.bind(this);\r\n   }\r\n\r\n   componentWillMount(){\r\n      base.syncState('/', {\r\n         context: this,\r\n         state: 'fruitData'\r\n      });\r\n   }\r\n\r\n   getData(){\r\n      if(!this.state.fruitData.length){\r\n        return [];\r\n      } else {\r\n         return this.state.fruitData;\r\n      }\r\n   }\r\n\r\n   deleteFruit(index){\r\n      let fruits = this.getData();\r\n      fruits.splice(index,1);\r\n      this.setState({fruitData: fruits});\r\n   }\r\n\r\n   addFruit(fruitName){\r\n      let fruits = this.getData();\r\n      console.log(fruits);\r\n\r\n      fruits.push(fruitName);\r\n      fruits.sort();\r\n      this.setState({fruitData: fruits});\r\n   }\r\n\r\n   render(){\r\n      return (<div>\r\n         <h1>Listes des fruits </h1>\r\n         <FruitForm addItem={this.addFruit}/>\r\n         <FruitList \r\n            list={ this.getData() } \r\n            removeItem={this.deleteFruit}\r\n         />\r\n      </div>);\r\n   }\r\n}\r\n\r\nexport default FruitApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport FruitApp from './components/fruits/FruitApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FruitApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}